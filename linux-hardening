# Considerations when hardening a linux system

## Principle of least privilege

## Avoid running processes as root when not needed

## Single User mode attack vector mitigation

1. Make sure booting into single user requires sulogin not sushell
  - for systemd systems edit:
  ```
  > /lib/systemd/system/emergency.service && /lib/systemd/system/rescue.service
  ```

2. Also make sure that editing grub has a password to prevent changing initto bypass sulogin
  - generate encrypted password for grub
  ```
  > grub-mkpasswd-pbkdf2
  ```
  - edit /etc/grub/40-custom
  ```
  > set superusers="root"
  > password_pbkdf2 root grub.pbkdf2.sha512.10000.58F...hash...B88CC0EB4
  ```
  - set boot items as unrestricted to avoid having to enter password at EVERY boot
  ```
  > vim /etc/grub/10-linux
  > /menuentry
  [...]
   echo "menuentry '$(echo "$title" | grub_quote)' --unrestricted ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
   else
   echo "menuentry '$(echo "$os" | grub_quote)' --unrestricted ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  [...]
  > add `--unrestricted` same as the lines above
  ```
  - note: grub will override that file on update so you may need to do the step above again, unless you can override with 40-custom entry instead?
  - regenerate grub configs
  ```
  > update-grub && update-grub2
  ```

Reference: http://daniel-lange.com/archives/75-Securing-the-grub-boot-loader.html
